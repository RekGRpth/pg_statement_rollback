-- Test rollback at statement level with nested write statements from a function
LOAD 'pg_statement_rollback.so';
SET pg_statement_rollback.enabled TO on;
SET pg_statement_rollback.savepoint_name TO 'aze';
SET pg_statement_rollback.enable_writeonly TO on;
DROP SCHEMA IF EXISTS testrsl CASCADE;
NOTICE:  schema "testrsl" does not exist, skipping
CREATE SCHEMA testrsl;
SET search_path TO testrsl,public;
SET log_min_duration_statement TO -1;
SET log_statement TO 'all';
SET log_duration TO off;
SET client_min_messages TO LOG;
CREATE FUNCTION test_insert() RETURNS integer AS $$
BEGIN
    RAISE NOTICE 'Call an insert from a select to see behavior of automatic savepoint with nested statement.';
    INSERT INTO tbl_rsl VALUES (3, 'three');
    INSERT INTO tbl_rsl VALUES (4, 'four');
    RETURN 1;
END
$$ LANGUAGE plpgsql;
LOG:  statement: CREATE FUNCTION test_insert() RETURNS integer AS $$
BEGIN
    RAISE NOTICE 'Call an insert from a select to see behavior of automatic savepoint with nested statement.';
    INSERT INTO tbl_rsl VALUES (3, 'three');
    INSERT INTO tbl_rsl VALUES (4, 'four');
    RETURN 1;
END
$$ LANGUAGE plpgsql;
\echo Test log_statement to show internal automatic savepoint
Test log_statement to show internal automatic savepoint
BEGIN;
LOG:  statement: BEGIN;
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
DROP TABLE IF EXISTS tbl_rsl;
LOG:  statement: DROP TABLE IF EXISTS tbl_rsl;
NOTICE:  table "tbl_rsl" does not exist, skipping
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
CREATE TABLE tbl_rsl(id integer, val varchar(256));
LOG:  statement: CREATE TABLE tbl_rsl(id integer, val varchar(256));
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
INSERT INTO tbl_rsl VALUES (1, 'one');
LOG:  statement: INSERT INTO tbl_rsl VALUES (1, 'one');
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
SELECT * FROM tbl_rsl; -- No automatic savepoint on SELECT
LOG:  statement: SELECT * FROM tbl_rsl;
 id | val 
----+-----
  1 | one
(1 row)

UPDATE tbl_rsl SET id = 2, val = 'two' WHERE id = 1;
LOG:  statement: UPDATE tbl_rsl SET id = 2, val = 'two' WHERE id = 1;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
DELETE FROM tbl_rsl WHERE id = 2;
LOG:  statement: DELETE FROM tbl_rsl WHERE id = 2;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
COMMIT;
LOG:  statement: COMMIT;
\echo Test to show internal automatic savepoint and call to a modifying function
Test to show internal automatic savepoint and call to a modifying function
BEGIN;
LOG:  statement: BEGIN;
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
DROP TABLE IF EXISTS tbl_rsl;
LOG:  statement: DROP TABLE IF EXISTS tbl_rsl;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
CREATE TABLE tbl_rsl(id integer, val varchar(256));
LOG:  statement: CREATE TABLE tbl_rsl(id integer, val varchar(256));
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
INSERT INTO tbl_rsl VALUES (1, 'one');
LOG:  statement: INSERT INTO tbl_rsl VALUES (1, 'one');
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
SELECT test_insert();
LOG:  statement: SELECT test_insert();
NOTICE:  Call an insert from a select to see behavior of automatic savepoint with nested statement.
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
 test_insert 
-------------
           1
(1 row)

UPDATE tbl_rsl SET id = 2, val = 'two' WHERE id = 1;
LOG:  statement: UPDATE tbl_rsl SET id = 2, val = 'two' WHERE id = 1;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
DELETE FROM tbl_rsl WHERE id = 2;
LOG:  statement: DELETE FROM tbl_rsl WHERE id = 2;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
SELECT * FROM tbl_rsl;
LOG:  statement: SELECT * FROM tbl_rsl;
 id |  val  
----+-------
  3 | three
  4 | four
(2 rows)

COMMIT;
LOG:  statement: COMMIT;
\echo Test nested statement from function call and internal automatic savepoint
Test nested statement from function call and internal automatic savepoint
BEGIN;
LOG:  statement: BEGIN;
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
DROP TABLE IF EXISTS tbl_rsl;
LOG:  statement: DROP TABLE IF EXISTS tbl_rsl;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
CREATE TABLE tbl_rsl(id integer, val varchar(256));
LOG:  statement: CREATE TABLE tbl_rsl(id integer, val varchar(256));
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
INSERT INTO tbl_rsl VALUES (1, 'one');
LOG:  statement: INSERT INTO tbl_rsl VALUES (1, 'one');
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
SELECT test_insert();
LOG:  statement: SELECT test_insert();
NOTICE:  Call an insert from a select to see behavior of automatic savepoint with nested statement.
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
 test_insert 
-------------
           1
(1 row)

UPDATE tbl_rsl SET id = 'two', val = 2 WHERE id = 1; -- will fail
LOG:  statement: UPDATE tbl_rsl SET id = 'two', val = 2 WHERE id = 1;
ERROR:  invalid input syntax for type integer: "two"
LINE 1: UPDATE tbl_rsl SET id = 'two', val = 2 WHERE id = 1;
                                ^
ROLLBACK TO SAVEPOINT aze;
LOG:  statement: ROLLBACK TO SAVEPOINT aze;
DELETE FROM tbl_rsl WHERE id = 1;
LOG:  statement: DELETE FROM tbl_rsl WHERE id = 1;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
SELECT * FROM tbl_rsl; -- Should show records id 3 and 4 from test_insert() call
LOG:  statement: SELECT * FROM tbl_rsl;
 id |  val  
----+-------
  3 | three
  4 | four
(2 rows)

COMMIT;
LOG:  statement: COMMIT;
\echo Test nested statement from function call and internal automatic savepoint after ProcessUtility
Test nested statement from function call and internal automatic savepoint after ProcessUtility
BEGIN;
LOG:  statement: BEGIN;
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
DROP TABLE IF EXISTS tbl_rsl;
LOG:  statement: DROP TABLE IF EXISTS tbl_rsl;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
CREATE TABLE tbl_rsl(id integer, val varchar(256));
LOG:  statement: CREATE TABLE tbl_rsl(id integer, val varchar(256));
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
INSERT INTO tbl_rsl VALUES (1, 'one');
LOG:  statement: INSERT INTO tbl_rsl VALUES (1, 'one');
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
SELECT test_insert();
LOG:  statement: SELECT test_insert();
NOTICE:  Call an insert from a select to see behavior of automatic savepoint with nested statement.
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
 test_insert 
-------------
           1
(1 row)

CREATE TABLE tbl_rsl(id integer, val varchar(256)); -- will fail
LOG:  statement: CREATE TABLE tbl_rsl(id integer, val varchar(256));
ERROR:  relation "tbl_rsl" already exists
ROLLBACK TO SAVEPOINT aze;
LOG:  statement: ROLLBACK TO SAVEPOINT aze;
DELETE FROM tbl_rsl WHERE id = 1;
LOG:  statement: DELETE FROM tbl_rsl WHERE id = 1;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
SELECT * FROM tbl_rsl; -- Should show records id 3 and 4 from test_insert() call
LOG:  statement: SELECT * FROM tbl_rsl;
 id |  val  
----+-------
  3 | three
  4 | four
(2 rows)

COMMIT;
LOG:  statement: COMMIT;
\echo Test automatic savepoint after select when write only is off
Test automatic savepoint after select when write only is off
SET pg_statement_rollback.enable_writeonly TO off;
LOG:  statement: SET pg_statement_rollback.enable_writeonly TO off;
BEGIN;
LOG:  statement: BEGIN;
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
DROP TABLE IF EXISTS tbl_rsl;
LOG:  statement: DROP TABLE IF EXISTS tbl_rsl;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
CREATE TABLE tbl_rsl(id integer, val varchar(256));
LOG:  statement: CREATE TABLE tbl_rsl(id integer, val varchar(256));
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
INSERT INTO tbl_rsl VALUES (1, 'one');
LOG:  statement: INSERT INTO tbl_rsl VALUES (1, 'one');
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
SELECT * FROM tbl_rsl; -- Automatic savepoint on SELECT
LOG:  statement: SELECT * FROM tbl_rsl;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
 id | val 
----+-----
  1 | one
(1 row)

UPDATE tbl_rsl SET id = 2, val = 'two' WHERE id = 1;
LOG:  statement: UPDATE tbl_rsl SET id = 2, val = 'two' WHERE id = 1;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
DELETE FROM tbl_rsl WHERE id = 2;
LOG:  statement: DELETE FROM tbl_rsl WHERE id = 2;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
COMMIT;
LOG:  statement: COMMIT;
DROP SCHEMA testrsl CASCADE;
LOG:  statement: DROP SCHEMA testrsl CASCADE;
NOTICE:  drop cascades to 2 other objects
DETAIL:  drop cascades to function test_insert()
drop cascades to table tbl_rsl
