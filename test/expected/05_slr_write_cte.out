-- Test rollback at statement level with nested write statements from a function
LOAD 'pg_statement_rollback.so';
SET pg_statement_rollback.enabled TO on;
SET pg_statement_rollback.savepoint_name TO 'aze';
SET pg_statement_rollback.enable_writeonly TO on;
DROP SCHEMA IF EXISTS testrsl CASCADE;
NOTICE:  schema "testrsl" does not exist, skipping
CREATE SCHEMA testrsl;
SET search_path TO testrsl,public;
SET log_min_duration_statement TO -1;
SET log_statement TO 'all';
SET log_duration TO off;
SET client_min_messages TO LOG;
\echo Test write CTE and internal automatic savepoint 
Test write CTE and internal automatic savepoint
BEGIN;
LOG:  statement: BEGIN;
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
DROP TABLE IF EXISTS tbl_rsl;
LOG:  statement: DROP TABLE IF EXISTS tbl_rsl;
NOTICE:  table "tbl_rsl" does not exist, skipping
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
CREATE TABLE tbl_rsl(id integer, val varchar(256));
LOG:  statement: CREATE TABLE tbl_rsl(id integer, val varchar(256));
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
INSERT INTO tbl_rsl VALUES (1, 'one');
LOG:  statement: INSERT INTO tbl_rsl VALUES (1, 'one');
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
WITH write AS (INSERT INTO tbl_rsl VALUES (2, 'two') RETURNING id, val) SELECT * FROM write;
LOG:  statement: WITH write AS (INSERT INTO tbl_rsl VALUES (2, 'two') RETURNING id, val) SELECT * FROM write;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
 id | val 
----+-----
  2 | two
(1 row)

UPDATE tbl_rsl SET id = 'two', val = 2 WHERE id = 1; -- will fail
LOG:  statement: UPDATE tbl_rsl SET id = 'two', val = 2 WHERE id = 1;
ERROR:  invalid input syntax for type integer: "two"
LINE 1: UPDATE tbl_rsl SET id = 'two', val = 2 WHERE id = 1;
                                ^
ROLLBACK TO SAVEPOINT aze;
LOG:  statement: ROLLBACK TO SAVEPOINT aze;
DELETE FROM tbl_rsl WHERE id = 1;
LOG:  statement: DELETE FROM tbl_rsl WHERE id = 1;
LOG:  statement: RELEASE aze; /* automatic savepoint */
LOG:  statement: SAVEPOINT aze; /* automatic savepoint */
SELECT * FROM tbl_rsl; -- Should show records id 2
LOG:  statement: SELECT * FROM tbl_rsl;
 id | val 
----+-----
  2 | two
(1 row)

COMMIT;
LOG:  statement: COMMIT;
DROP SCHEMA testrsl CASCADE;
LOG:  statement: DROP SCHEMA testrsl CASCADE;
NOTICE:  drop cascades to table tbl_rsl
